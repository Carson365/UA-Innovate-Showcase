@page "/view"
@using BlazorApp.Data
@inject EmployeeService EmployeeService


<h3>View</h3>


	<style>
	.container {
	  display: grid;
	grid-template-rows: 1fr 1fr 1fr;
	grid-template-columns: 1fr 1fr 1fr;

	}

	.up {
  grid-row-start: 1;
  grid-row-end: 1;
}

.primary.primary {
  grid-row-start: 2;
  grid-row-end: 2;
  background-color: var(--secondary);
}

	.subprimary.subprimary {
		grid-row-start: 2;
		grid-row-end: 2;
		background-image: linear-gradient(45deg, var(--primary), var(--secondary));
		background-color: var(--accent);
	}

.down {
  grid-row-start: 3;
  grid-row-end: 3;
}




	
	.box {
	  padding: 10px;
	  justify-content: left;
	  margin: 5px 5px 5px 5px;
	  border: solid 2px var(--text);
	  border-radius: 10px;
	  background-color: var(--primary);
	  color: var(--text);
	  font-size: 12px;
	}

  </style>



<body>
  <div class="container">

			<div class="box primary">
				Name: @EmployeeService.primary.Name<br>
				Position: @EmployeeService.primary.Position<br>
				ID: @EmployeeService.primary.ID<br>
				Location: @EmployeeService.primary.Location<br>
				Email: @EmployeeService.primary.Email<br>
			<NavLink class="nav-link custom" @onclick="() => GetEmployee(EmployeeService.primary)">
					<span class="oi oi-people" aria-hidden="true"></span> Expand
				</NavLink>
			</div>

			@**@

		@if (EmployeeService.up != null && EmployeeService.up.Downs.Any(i => i != null))
		{
			@foreach (var item in GetDowns1(EmployeeService.up, EmployeeService.primary))
			{
				@if (item != EmployeeService.up)
				{
					<div class="box subprimary">
						Name: @item.Name<br>
						Position: @item.Position<br>
						ID: @item.ID<br>
						Location: @item.Location<br>
						Email: @item.Email<br>
						<NavLink class="nav-link custom" @onclick="() => GetEmployee(item)">
							<span class="oi oi-people" aria-hidden="true"></span> Expand
						</NavLink>
					</div>
				}
			}
		}

			@**@

			@if (EmployeeService.up != null)
			{
			<div class="box up">
				Name: @EmployeeService.up.Name<br>
				Position: @EmployeeService.up.Position<br>
				ID: @EmployeeService.up.ID<br>
				Location: @EmployeeService.up.Location<br>
				Email: @EmployeeService.up.Email<br>
				<NavLink class="nav-link custom" @onclick="() => GetEmployee(EmployeeService.up)">
					<span class="oi oi-people" aria-hidden="true"></span> Expand
				</NavLink>
			</div>
			}


		@if (EmployeeService.downs.Any(i => i != null))
		{
			@foreach (var item in EmployeeService.downs)
			{
				<div class="box down">
					Name: @item.Name<br>
					Position: @item.Position<br>
					ID: @item.ID<br>
					Location: @item.Location<br>
					Email: @item.Email<br>
					<NavLink class="nav-link custom" @onclick="() => GetEmployee(item)">
						<span class="oi oi-people" aria-hidden="true"></span> Expand
					</NavLink>
				</div>
			}
		}
	 
	  </div>
	</body>




@code {

	private void GetEmployee(Employee input)
	{
		EmployeeService.primary = input;
		EmployeeService.up = EmployeeService.employeelist.Find(x => x.ID == EmployeeService.primary.Up);
		EmployeeService.downs = new List<Employee>();
		foreach (string k in EmployeeService.primary.Downs)
		{
			EmployeeService.downs.Add(EmployeeService.employeelist.Find(x => x.ID == k));
		}
	}

	private List<Employee> GetDowns1(Employee input, Employee exclude)
	{
		List<Employee> out1 = new();
		foreach (string k in input.Downs)
		{
			if (k != input.ID) out1.Add(EmployeeService.employeelist.Find(x => x.ID == k));
		}
		out1.Remove(exclude);
		for (int i = 0; i < out1.Count; i++)
		{
			Console.WriteLine(out1[i].Name);
		}
		return out1;
	}

}
